<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-10-01T21:11:34-06:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Matt’s Blog</title><subtitle>I'm Matt Yan. I like to dig into stuff.</subtitle><entry><title type="html">Remap keys for specific device on ubuntu</title><link href="http://localhost:4000/2019/09/25/remap-keys-for-specific-device-on-ubuntu.html" rel="alternate" type="text/html" title="Remap keys for specific device on ubuntu" /><published>2019-09-25T00:47:00-06:00</published><updated>2019-09-25T00:47:00-06:00</updated><id>http://localhost:4000/2019/09/25/remap-keys-for-specific-device-on-ubuntu</id><content type="html" xml:base="http://localhost:4000/2019/09/25/remap-keys-for-specific-device-on-ubuntu.html">&lt;p&gt;People love programmable peripherals. Yet few may know one can easily make any keyboad/keypad programmable on Ubuntu.&lt;/p&gt;

&lt;p&gt;Time to lay out all your spare keypads and keyboards and build your self a real hacker console. (or play the piano)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/peripherals.jpeg&quot; alt=&quot;peripherals&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;remap-keys&quot;&gt;Remap keys&lt;/h2&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;tldr&quot;&gt;tl;dr&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo apt-get install -y evtest&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Use &lt;code class=&quot;highlighter-rouge&quot;&gt;evtest&lt;/code&gt; to check device info&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;vim /lib/udev/hwdb.d/60-keyboard.hwdb&lt;/code&gt; and follow the instruction&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;On Linux systems, one can write &lt;code class=&quot;highlighter-rouge&quot;&gt;hwdb&lt;/code&gt; files to remap physical keys or parts on a certain device.&lt;/p&gt;

&lt;p&gt;We first need to know information about the device we want to edit (keyboard/keypad)&lt;/p&gt;

&lt;h3 id=&quot;get-device-id&quot;&gt;Get device ID&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;evtest&lt;/code&gt; is an amazing tool to tell us info about our devices&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo apt-get install -y evtest&lt;/code&gt; to install it.&lt;/p&gt;

&lt;p&gt;Next run &lt;code class=&quot;highlighter-rouge&quot;&gt;$ sudo evtest&lt;/code&gt; to get a list of your devices:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;matt@host:/etc/udev/hwdb.d$ sudo evtest
Available devices:
...
/dev/input/event6:	Razer Razer Orbweaver Chroma            (keypad)
/dev/input/event9:	Razer Razer BlackWidow Ultimate 2016    (keyboard)
/dev/input/event11:	Compx 2.4G Receiver                     (wireless keyboard)
/dev/input/event12:	Compx 2.4G Receiver                     (wireless mouse)
...
Select the device event number [0-23]: 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now select the device you want to modify by providing the number and press enter. Let’s say we chose the keypad.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Select the device event number [0-15]: 6
Input driver version is 1.0.1
Input device ID: bus 0x3 vendor 0x1532 product 0x20d version 0x1a1
Input device name: &quot;Razer Razer Orbweaver Chroma&quot;
Supported events:
  Event type 0 (EV_SYN)
  Event type 1 (EV_KEY)
    Event code 1 (KEY_ESC)
    Event code 2 (KEY_1)
    Event code 3 (KEY_2)
    Event code 4 (KEY_3)
    Event code 5 (KEY_4)
    Event code 6 (KEY_5)
    ...                         (A bunch key codes saying what this device can do)
Properties:
Testing ... (interrupt to exit)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The most important thing we want from this output is the &lt;strong&gt;Input device ID&lt;/strong&gt; as we’ll use it later in 
an &lt;code class=&quot;highlighter-rouge&quot;&gt;hwdb&lt;/code&gt; file to identify the device&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Input device ID: bus 0x3 vendor 0x1532 product 0x20d version 0x1a1&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To confirm you have chosen the right device. If you just press random keys on that device, you’ll see feedbacks on the terminal
as &lt;code class=&quot;highlighter-rouge&quot;&gt;evtest&lt;/code&gt; is now detecting your key presses from this device.&lt;/p&gt;

&lt;h3 id=&quot;get-scancode-for-physical-key&quot;&gt;Get scancode for physical key&lt;/h3&gt;

&lt;p&gt;Now press the physical key you want to remap, &lt;code class=&quot;highlighter-rouge&quot;&gt;evtest&lt;/code&gt; prints information like this:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Testing ... (interrupt to exit)
Event: time 1569402713.766496, type 17 (EV_LED), code 0 (LED_NUML), value 0
Event: time 1569402713.766496, type 4 (EV_MSC), code 4 (MSC_SCAN), value 7002c
Event: time 1569402713.766496, type 1 (EV_KEY), code 57 (KEY_SPACE), value 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Basically each physical key has a &lt;strong&gt;scancode&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;What we want from this output is  the line with &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;MSC_SCAN&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Event: time 1569402713.766496, type 4 (EV_MSC), code 4 (&lt;strong&gt;MSC_SCAN&lt;/strong&gt;), value 7002c&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The hex number &lt;code class=&quot;highlighter-rouge&quot;&gt;7002c&lt;/code&gt; here is the &lt;strong&gt;scancode&lt;/strong&gt; for the physical key.&lt;/p&gt;

&lt;h3 id=&quot;write-hwbd-script&quot;&gt;Write hwbd script&lt;/h3&gt;

&lt;p&gt;Lastly we need to know the &lt;strong&gt;keycode&lt;/strong&gt; of the target key we want to remap to.&lt;/p&gt;

&lt;p&gt;A &lt;strong&gt;keycode&lt;/strong&gt; is simply a string (note: not a number), most of the times it’s intuitive. e.g. “space” “0” “f1”&lt;/p&gt;

&lt;p&gt;You can see a sorted list on this &lt;a href=&quot;https://hal.freedesktop.org/quirk/quirk-keymap-list.txt&quot;&gt;web page&lt;/a&gt; or check &lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/include/linux/input-event-codes.h&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Note in &lt;code class=&quot;highlighter-rouge&quot;&gt;input-event-codes.h&lt;/code&gt; only the part after “KEY_” is the keycode&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;input-event-codes.h

#define KEY_X                   45
#define KEY_C                   46
#define KEY_V                   57
#define KEY_SLASH               53
#define KEY_RIGHTSHIFT          54

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now that we have &lt;strong&gt;device ID&lt;/strong&gt;, &lt;strong&gt;scancode&lt;/strong&gt;, and &lt;strong&gt;keycode&lt;/strong&gt;,
it’s finally time to write the remapping script.&lt;/p&gt;

&lt;p&gt;Let’s create &lt;code class=&quot;highlighter-rouge&quot;&gt;90-custom-keyboard.hwdb&lt;/code&gt; under &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/udev/hwdb.d&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The filename can be arbitrary as long as it’s not identical as one of the names of system &lt;code class=&quot;highlighter-rouge&quot;&gt;hwdb&lt;/code&gt; files under &lt;code class=&quot;highlighter-rouge&quot;&gt;/lib/udev/hwdb.d&lt;/code&gt; 
while it’s a convention to have numbers and dash at the beginning&lt;/p&gt;

&lt;p&gt;Now write the following content to the new &lt;code class=&quot;highlighter-rouge&quot;&gt;hwdb&lt;/code&gt; file&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 90-custom-keyboard.hwdb

evdev:input:bZZZZvYYYYpXXXXeWWWW*
 KEYBOARD_KEY_&amp;lt;scancode&amp;gt;=&amp;lt;keycode&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Recall the &lt;strong&gt;input device ID&lt;/strong&gt; we got previously&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Input device ID: bus 0x3 vendor 0x1532 product 0x20d version 0x1a1&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Replace ZZZZ with bus, YYYY with vendor, XXXX with product, and WWWW with version. Lastly add an asterisk.&lt;/p&gt;

&lt;p&gt;Left pad zero if necessary and use upper case hex letters.&lt;/p&gt;

&lt;p&gt;For our case, if we want to remap the key to space bar, the file looks like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 90-custom-keyboard.hwdb

evdev:input:b0003v1532p020De01A1*
 KEYBOARD_KEY_7002c=space
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It’s also intuitive to add multiple devices and keys:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 90-custom-keyboard.hwdb

evdev:input:b0003v1532p020De01A1*
 KEYBOARD_KEY_7002c=space
 KEYBOARD_KEY_7123=down
 KEYBOARD_KEY_24e1=a
 KEYBOARD_KEY_23a3=b
 
evdev:input:b0002v1512p221De2311*
 KEYBOARD_KEY_12b41=1
 KEYBOARD_KEY_2113=up
 KEYBOARD_KEY_4411=down
 KEYBOARD_KEY_2223=4
 
...
 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;At last we need to apply our settings by running this following commands&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$sudo systemd-hwdb update&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$sudo udevadm trigger --sysname-match=&quot;event*&quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Congrat! Now your keys are remapped!&lt;/p&gt;

&lt;h2 id=&quot;macros&quot;&gt;Macros&lt;/h2&gt;

&lt;p&gt;Lame thing first: it’s not easy to do macros. You can not remap keys to key combinations either.&lt;/p&gt;

&lt;p&gt;You can, however use the following approach&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Install &lt;code class=&quot;highlighter-rouge&quot;&gt;xdotools&lt;/code&gt; with &lt;code class=&quot;highlighter-rouge&quot;&gt;$ sudo apt-get install xdotools&lt;/code&gt; on the terminal&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;xdotools&lt;/code&gt; is an amazing macro command player. Yet it’s only accessible
  from the terminal. And one need to write macro in shell script in order to play it.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;write shell script with &lt;code class=&quot;highlighter-rouge&quot;&gt;xdotools&lt;/code&gt;. &lt;code class=&quot;highlighter-rouge&quot;&gt;chmod +x &amp;lt;script_name&amp;gt;&lt;/code&gt; and put it under &lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/bin&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Go to &lt;code class=&quot;highlighter-rouge&quot;&gt;Settings&amp;gt;Devices&amp;gt;Keyboard&lt;/code&gt;. Scroll to the bottom to add a custom shortcut with &lt;code class=&quot;highlighter-rouge&quot;&gt;command&lt;/code&gt; field being &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;script_name&amp;gt;&lt;/code&gt;.&lt;/p&gt;

    &lt;p&gt;One can remap unused keycodes (There are plenty: e.g. pause/break, screen lock, 
  multimedia keys…) to some physical key on a device and make it a custom shortcut.
  Then it’s essentially a one-key macro.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The difficulty is in writing the shell script. It’s quite some learning curve. I recommend searching online for resources and try out simple ones first.&lt;/p&gt;

&lt;p&gt;On the other hand, being able to write a script is also a huge virtue. You will be able to have finer control over the macro.&lt;/p&gt;

&lt;p&gt;The following is a very specific macro I wrote, which, say one won’t be able to craft in “Razer Synapse” (driver for razer peripherals)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;If currently focused window is &quot;Pycharm&quot;:
    click on the right side of the opened window
    press pagedown
    move mouse back to original position
else
    do nothing
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;other-resources&quot;&gt;Other Resources&lt;/h2&gt;

&lt;p&gt;If you are familiar with Python. Check &lt;a href=&quot;https://pypi.org/project/PyAutoGUI/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pyautogui&lt;/code&gt;&lt;/a&gt; 
&lt;a href=&quot;https://pypi.org/project/pynput/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pynput&lt;/code&gt;&lt;/a&gt;
 &lt;a href=&quot;https://pyahk.readthedocs.io/en/latest/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pyahk&lt;/code&gt;&lt;/a&gt;, they can substitute &lt;code class=&quot;highlighter-rouge&quot;&gt;xdotools&lt;/code&gt; if shell scripts are not your thing.&lt;/p&gt;</content><author><name></name></author><summary type="html">People love programmable peripherals. Yet few may know one can easily make any keyboad/keypad programmable on Ubuntu.</summary></entry></feed>